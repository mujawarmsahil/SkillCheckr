package com.example.demo.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.lang.Nullable;
import org.springframework.stereotype.Repository;

import com.example.demo.Model.Exams;
import com.example.demo.Model.Subject;

@Repository
public class AddExamsRepositoryImpl implements AddExamsRepository {

	@Autowired
	private DataSource dataSource;

	@Autowired
	public JdbcTemplate jdbcTemplate;

	@Override
	public Subject saveAllExams(Exams exam) {
		try {
			// Step 1: Check if subject_code already exists
			String subjectCode = exam.getSubject().getSubjectCode();
			int subjectId;

			String checkSubjectQuery = "SELECT COUNT(*) FROM subject WHERE subject_code = ?";
			int count = jdbcTemplate.queryForObject(checkSubjectQuery, new Object[] { subjectCode }, Integer.class);

			if (count > 0) {

				String getSubjectIdQuery = "SELECT subject_id FROM subject WHERE subject_code = ?";
				subjectId = jdbcTemplate.queryForObject(getSubjectIdQuery, new Object[] { subjectCode }, Integer.class);
			} else {
				// Subject not exists â†’ insert and get subject_id
				String insertSubjectQuery = "INSERT INTO subject (subject_name, subject_code) VALUES (?, ?)";
				jdbcTemplate.update(insertSubjectQuery, exam.getSubject().getSubjectName(), subjectCode);

				String getSubjectIdQuery = "SELECT subject_id FROM subject WHERE subject_code = ?";
				subjectId = jdbcTemplate.queryForObject(getSubjectIdQuery, new Object[] { subjectCode }, Integer.class);
			}

			if (exam.getStatus() == null || exam.getStatus().isEmpty()) {
				exam.setStatus("Pending");
			}

			if (exam.getDate() == null || exam.getDate().isEmpty()) {
				System.err.println("Error: Exam date is null or empty.");
				return null;// false
			}
			Timestamp timestamp = Timestamp.valueOf(LocalDateTime.parse(exam.getDate()));

			// Step 2: Insert Exam
			String insertExamQuery = "INSERT INTO exam (subject_id, teacher_id, exam_name, exam_date, duration_minutes, total_marks, pass_marks, status,start_time, end_time) "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?,?,?)";

			jdbcTemplate.update(insertExamQuery, subjectId, exam.getTeacher_id(), exam.getExam_name(), timestamp,
					exam.getDuration_minuets(), exam.getTotal_marks(), exam.getPassing_marks(), exam.getStatus());
			exam.getStart_time();
			exam.getEnd_time();

			Subject subject = new Subject();
//            subject.getSubjectId();
			subject.setSubjectId(subjectId);
			subject.setSubjectName(exam.getSubject().getSubjectName());
			subject.setSubjectCode(subjectCode);
			return subject;

		} catch (Exception e) {
			e.printStackTrace(); // log it
			return null;
		}
	}


	@Override
	public List<Exams> viewAllExams() {
	    String query = "SELECT * FROM exam";

	    List<Exams> list = jdbcTemplate.query(query, new RowMapper<Exams>() {
	        @Override
	        public Exams mapRow(ResultSet rs, int rowNum) throws SQLException {
	            Exams exam = new Exams();
	            exam.setExame_id(rs.getInt("exam_id"));
	            exam.setTeacher_id(rs.getInt("teacher_id"));
	            exam.setExam_name(rs.getString("exam_name"));
	            exam.setDate(rs.getString("exam_date"));
	            exam.setStatus(rs.getString("status"));

	            java.sql.Time sqlStartTime = rs.getTime("start_time");
	            java.sql.Time sqlEndTime = rs.getTime("end_time");

	            if (sqlStartTime != null)
	                exam.setStart_time(sqlStartTime.toLocalTime());
	            if (sqlEndTime != null)
	                exam.setEnd_time(sqlEndTime.toLocalTime());

	            // Optional fields - only if you want to send them to frontend
	            exam.setDuration_minuets(rs.getInt("duration_minutes"));
	            exam.setTotal_marks(rs.getInt("total_marks"));
	            exam.setPassing_marks(rs.getInt("pass_marks"));

	            return exam;
	        }
	    });

	    return list;
	}

}
